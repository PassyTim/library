// <auto-generated />
using System;
using Library.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240901230946_AddExtraSeedData")]
    partial class AddExtraSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Library.Domain.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "Россия",
                            FirstName = "Александр",
                            LastName = "Пушкин"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "США",
                            FirstName = "Стивен",
                            LastName = "Кинг"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "Россия",
                            FirstName = "Федор",
                            LastName = "Достоевский"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "Япония",
                            FirstName = "Масаси",
                            LastName = "Кисимото"
                        });
                });

            modelBuilder.Entity("Library.Domain.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("AvailableCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TotalCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Isbn")
                        .IsUnique();

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            AvailableCount = 3,
                            Description = "Можно сказать, что весь XIX век прошёл под знаком А. С. Пушкина. Но и сегодня, в XXI веке, уже тысячекратно повторённые школьными учебниками и хрестоматиями гениальные пушкинские строки не обесценились: как всё причастное к вечности, они дарят радость, вселяют надежду и утешение. В настоящем издании представлены роман в стихах \"Евгений Онегин\", а также самые известные стихотворения А. С. Пушкина, вошедшие в сокровищницу мировой литературы.",
                            Genre = "Роман",
                            ImagePath = "8fb16b40-17d4-43fa-b3fa-20238b342ad3.jpg",
                            Isbn = "9785171183661",
                            Name = "Евгений Онегин",
                            TotalCount = 3
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            AvailableCount = 3,
                            Description = "\"Сияние\" – культовый роман Стивена Кинга. Роман, который и сейчас, спустя тридцать с лишним лет после триумфального выхода в свет, читается так, словно был написан вчера.\n\nПисатель Джек Торренс устраивается на зиму работать смотрителем роскошного отеля \"Оверлук\", расположенного вблизи снежных горных вершин. Для мужчины это – отличная возможность закончить работу над своим романом, а еще провести время с женой и сыном.\n\nНа собеседовании владелец гостиницы рассказывает главному герою о том, что предыдущий смотритель после пяти месяцев работы в отеле помешался и убил свою жену и двух дочерей. Но Джека это совершенно не пугает.\nСемейство Торренсов благополучно въезжает в отель. И здание, будто живой организм, начинает испытывать своих постояльцев на прочность.\n\nКто сможет пережить пять месяцев в снежной пустыне? И действительно ли Джек впервые оказался посетителем отеля \"Оверлук\"?",
                            Genre = "Хоррор",
                            ImagePath = "theShining.jpg",
                            Isbn = "9781101948294",
                            Name = "The Shining",
                            TotalCount = 3
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            AvailableCount = 3,
                            Description = "Одно из \"краеугольных\" произведений русской и мировой литературы, включенный во все школьные и университетские программы, неоднократно экранизированный роман Достоевского \"Преступление и наказание\" ставит перед читателем важнейшие нравственно-мировоззренческие вопросы – о вере, совести, грехе и об искуплении через страдание. Опровержение преступной \"идеи-страсти\", \"безобразной мечты\", завладевшей умом Родиона Раскольникова в самом \"умышленном\" и \"фантастическом\" городе на свете, составляет основное содержание этой сложнейшей, соединившей в себе несколько различных жанров книги. Задуманный как \"психологический отчет одного преступления\", роман Достоевского предстал перед читателем грандиозным художественно-философским исследованием человеческой природы, христианской трагедией о смерти и воскресении души.",
                            Genre = "Роман",
                            ImagePath = "95a036bc205187af0456953a28ccccb1.jpeg",
                            Isbn = "9785171183685",
                            Name = "Преступление и наказание",
                            TotalCount = 3
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 3,
                            AvailableCount = 3,
                            Description = "Последний, самый объёмный и один из наиболее известных романов Ф. М. Достоевского обращает читателя к вневременным нравственно-философским вопросам о грехе, воздаянии, сострадании и милосердии. Книга, которую сам писатель определил как \"роман о богохульстве и опровержении его\", явилась попыткой \"решить вопрос о человеке\", \"разгадать тайну\" человека, что, по Достоевскому, означало \"решить вопрос о Боге\". Сквозь призму истории провинциальной семьи Карамазовых автор повествует об извечной борьбе Божественного и дьявольского в человеческой душе. Один из самых глубоких в мировой литературе опытов отражения христианского сознания, \"Братья Карамазовы\" стали в ХХ веке объектом парадоксальных философских и психоаналитических интерпретаций.",
                            Genre = "Роман",
                            ImagePath = "a6d50e17-c422-4c07-b73d-3b9e722fa1bb.jpg",
                            Isbn = "9785171183708",
                            Name = "Братья Карамазовы",
                            TotalCount = 3
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 2,
                            AvailableCount = 3,
                            Description = "В маленьком провинциальном городке Дерри много лет назад семерым подросткам пришлось столкнуться с кромешным ужасом – живым воплощением ада. Прошли годы... Подростки повзрослели, и ничто, казалось, не предвещало новой беды. Но кошмар прошлого вернулся, неведомая сила повлекла семерых друзей назад, в новую битву со Злом. Ибо в Дерри опять льется кровь и бесследно исчезают люди. Ибо вернулось порождение ночного кошмара, настолько невероятное, что даже не имеет имени...",
                            Genre = "Хоррор",
                            ImagePath = "i750566.jpg",
                            Isbn = "9780743273565",
                            Name = "Оно",
                            TotalCount = 3
                        },
                        new
                        {
                            Id = 42,
                            AuthorId = 2,
                            AvailableCount = 0,
                            Description = "Может ли спасение от верной гибели обернуться таким кошмаром, что даже смерть покажется милосердным даром судьбы?\nМожет. Ибо это произошло с Полом Шелдоном, автором бесконечного сериала книг о злоключениях Мизери. Раненый писатель оказался в руках Энни Уилкс — женщины, потерявшей рассудок на почве его романов. Уединенный домик одержимой бесами фурии превратился в камеру пыток, а существование Пола — в ад, полный боли и ужаса.",
                            Genre = "Хоррор",
                            ImagePath = "9785170925643--.jpg",
                            Isbn = "9780743273566",
                            Name = "Мизери",
                            TotalCount = 0
                        },
                        new
                        {
                            Id = 43,
                            AuthorId = 4,
                            AvailableCount = 1,
                            Description = "Наруто Удзумаки – самый проблемный ученик академии ниндзя в деревне Коноха. День за днем он выдумывает всяческие проказы и выводит из себя окружающих! Однако даже у этого хулигана есть заветная мечта. Он собирается превзойти героев прошлого, стать величайшим ниндзя и обрести всеобщее признание! Но люди сторонятся юного Удзумаки, а кто-то даже смотрит на него с отвращением… Наруто и не подозревает, что его жизнь связана с трагедией, постигшей Коноху двенадцать лет назад…",
                            Genre = "Манга.Комиксы",
                            ImagePath = "4394167.jpg",
                            Isbn = "9785389189324",
                            Name = "Наруто. Книга 1. Наруто Удзумаки",
                            TotalCount = 1
                        },
                        new
                        {
                            Id = 44,
                            AuthorId = 4,
                            AvailableCount = 2,
                            Description = "Став настоящими ниндзя, Наруто, Саскэ и Сакура получают ответственное задание – охранять знаменитого строителя мостов Тадзуну из Страны Волн. На жизнь этого старика покушаются беглый синоби Дзабудза и его подопечный Хаку, обладающий невероятными способностями. Столкновение с такими опасными противниками оборачивается трагедией, когда Саскэ закрывает собой Наруто от смертоносной атаки Хаку… Кажется, участь команды Какаси уже предрешена, но в Наруто вдруг пробуждается загадочная сила… Сможет ли он переломить ход битвы?",
                            Genre = "Манга.Комиксы",
                            ImagePath = "4436890_1.jpg",
                            Isbn = "9785389191358",
                            Name = "Наруто. Книга 2. Мост героя!",
                            TotalCount = 2
                        },
                        new
                        {
                            Id = 45,
                            AuthorId = 1,
                            AvailableCount = 3,
                            Description = "А.С. Пушкин (1799-1837) – величайший русский поэт, реформатор и создатель новой русской литературы, в своем творчестве придавший языку необыкновенную легкость, изысканность и одновременно точность выражения мысли; приблизивший народную речь к литературному языку, что и стало нормой. Стиль его произведений признают эталонным. Его перу было подвластно все: философская, гражданская, любовная лирика, переводы, подражания древним, сатирические жанры, в том числе эпиграммы. Свои жизненные и мировоззренческие искания Пушкин воплотил в стихотворениях, в которых отразилась широта интересов и трансформация взглядов поэта.",
                            Genre = "Стихотворения",
                            ImagePath = "9785041660864--.jpg",
                            Isbn = "9785041660864",
                            Name = "Я вас любил...",
                            TotalCount = 3
                        },
                        new
                        {
                            Id = 46,
                            AuthorId = 3,
                            AvailableCount = 3,
                            Description = "В настоящем издании представлен роман «Подросток». Наряду с романами «Преступление и наказание», «Идиот», «Бесы», «Братья Карамазовы» он составляет так называемое великое пятикнижие Достоевского. Желание денег и власти, мечта о превосходстве над миллионами «обыкновенных», проблема отцов и детей, богоборчество – вот опасности для русского подростка. Преодолимы ли они и что победит в итоге: бунт против людей и Бога или же любовь к «живой жизни»?",
                            Genre = "Роман",
                            ImagePath = "9785389156487.jpg",
                            Isbn = "9785389156487",
                            Name = "Подросток",
                            TotalCount = 3
                        },
                        new
                        {
                            Id = 47,
                            AuthorId = 3,
                            AvailableCount = 3,
                            Description = "\"Главная идея... – писал Ф. М. Достоевский о своем романе \"Идиот\", – изобразить положительно-прекрасного человека. Труднее этого нет ничего на свете...\" Не для того ли писатель явил миру \"князя-Христа\", чтобы мы не забывали: \"Страдание есть главнейший и, может быть, единственный закон бытия всего человечества\".\n\nКаждое новое поколение по-своему воспринимает классику и пытается дать собственные ответы на вечные вопросы бытия. Об этом свидетельствуют и известные экранизации романа, его сценические версии. В России запоминающиеся образы князя Мышкина создали Ю. Яковлев, И. Смоктуновский, Е. Миронов.",
                            Genre = "Роман",
                            ImagePath = "249816.jpg",
                            Isbn = "9785389047303",
                            Name = "Идиот",
                            TotalCount = 3
                        },
                        new
                        {
                            Id = 48,
                            AuthorId = 4,
                            AvailableCount = 2,
                            Description = "Наруто, Саскэ и Сакуре пришлось применить все свои силы и умения, чтобы справиться со вторым этапом экзамена на звание тюнина. Однако претендентов на участие в финальном испытании оказалось слишком много, и организаторы решили провести дополнительный этап – предварительные сражения один на один. Саскэ и Наруто удалось одолеть своих противников, бой Сакуры закончился ничьей. И теперь пришла очередь Рока Ли и Гаары: искусное тайдзюцу против непробиваемой песчаной защиты, невероятное упорство против врожденных способностей... Кто же из них победит и пройдет дальше?",
                            Genre = "Манга.Комиксы",
                            ImagePath = "210920105901.jpeg",
                            Isbn = "9785389198098",
                            Name = "Наруто. Книга 3. Превосходный ниндзя",
                            TotalCount = 2
                        });
                });

            modelBuilder.Entity("Library.Domain.Models.BorrowedBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TakeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BorrowedBooks");
                });

            modelBuilder.Entity("Library.Domain.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Library.Domain.Models.Book", b =>
                {
                    b.HasOne("Library.Domain.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Library.Domain.Models.BorrowedBook", b =>
                {
                    b.HasOne("Library.Domain.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Library.Domain.Models.User", "User")
                        .WithMany("BorrowedBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Library.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Library.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Library.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Domain.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Library.Domain.Models.User", b =>
                {
                    b.Navigation("BorrowedBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
